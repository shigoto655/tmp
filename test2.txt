①
基本的な実装方法（フロントエンド）
以下は、Next.jsの画面でボタンをクリックしてExcelファイルをダウンロードする例です。
// components/ExcelExportButton.tsx
import * as XLSX from 'xlsx';

const ExcelExportButton = () => {
  const handleExport = () => {
    const data = [
      { 名前: '田中', 年齢: 30 },
      { 名前: '佐藤', 年齢: 25 },
    ];

    const worksheet = XLSX.utils.json_to_sheet(data);
    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, 'Sheet1');

    XLSX.writeFile(workbook, 'sample.xlsx');
  };

  return <button onClick={handleExport}>Excel出力</button>;
};

export default ExcelExportButton;

② バックエンドで生成する場合（APIルート）
Next.jsのAPIルートを使ってExcelファイルを生成し、ダウンロードリンクを提供することもできます。
// pages/api/export.ts
import { NextApiRequest, NextApiResponse } from 'next';
import * as XLSX from 'xlsx';

export default function handler(req: NextApiRequest, res: NextApiResponse) {
  const data = [
    { 名前: '田中', 年齢: 30 },
    { 名前: '佐藤', 年齢: 25 },
  ];

  const worksheet = XLSX.utils.json_to_sheet(data);
  const workbook = XLSX.utils.book_new();
  XLSX.utils.book_append_sheet(workbook, worksheet, 'Sheet1');

  const buffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'buffer' });

  res.setHeader('Content-Disposition', 'attachment; filename=sample.xlsx');
  res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
  res.send(buffer);
}


③フロントからAPIを呼び出してダウンロードする方法
const downloadExcel = async () => {
  const response = await fetch('/api/export');
  const blob = await response.blob();
  const url = window.URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = 'sample.xlsx';
  a.click();
  window.URL.revokeObjectURL(url);
};

どちらの方法が適しているか？
方法	特徴	おすすめケース
フロントエンド	クライアント側で完結	小規模データ、即時出力
バックエンド	サーバーで処理	大規模データ、セキュリティ重視
